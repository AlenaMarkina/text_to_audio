"""initial migration

Revision ID: 237a5be0ccfc
Revises: 
Create Date: 2025-07-23 11:53:57.019771

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '237a5be0ccfc'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('create schema if not exists guide;')

    op.create_table('countries',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_name_en', sa.Enum('Russia', 'Germany', 'Portugal', name='countryen'), nullable=False),
    sa.Column('country_name_ru', sa.Enum('Россия', 'Германия', 'Португалия', name='countryru'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('country_name_en'),
    sa.UniqueConstraint('country_name_ru'),
    schema='guide'
    )
    op.create_table('cities',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.Uuid(), nullable=False),
    sa.Column('city_name_en', sa.Enum('Moscow', 'Lisbon', 'Ludwigsburg', name='cityen'), nullable=False),
    sa.Column('city_name_ru', sa.Enum('Москва', 'Лиссабон', 'Людвигсбург', name='cityru'), nullable=False),
    sa.Column('lat', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('long', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['guide.countries.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('city_name_en'),
    sa.UniqueConstraint('city_name_ru'),
    schema='guide'
    )
    op.create_table('landmarks',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('city_id', sa.Uuid(), nullable=False),
    sa.Column('landmark_name_en', sa.String(), nullable=False),
    sa.Column('landmark_name_ru', sa.String(), nullable=False),
    sa.Column('lat', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('long', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['city_id'], ['guide.cities.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('city_id', 'landmark_name_en'),
    schema='guide'
    )
    op.create_table('descriptions',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('landmark_id', sa.Uuid(), nullable=False),
    sa.Column('desc_path', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['landmark_id'], ['guide.landmarks.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('desc_path'),
    schema='guide'
    )
    op.create_table('images',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('landmark_id', sa.Uuid(), nullable=False),
    sa.Column('image_path', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['landmark_id'], ['guide.landmarks.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('image_path'),
    schema='guide'
    )
    op.create_table('audios',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('landmark_id', sa.Uuid(), nullable=False),
    sa.Column('desc_id', sa.Uuid(), nullable=False),
    sa.Column('audio_path', sa.String(), nullable=False),
    sa.Column('duration_sec', sa.SmallInteger(), nullable=False),
    sa.Column('language', sa.String(length=2), server_default='ru', nullable=False),
    sa.Column('voiceover', sa.String(length=6), server_default='male', nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['desc_id'], ['guide.descriptions.id'], ),
    sa.ForeignKeyConstraint(['landmark_id'], ['guide.landmarks.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('audio_path'),
    sa.UniqueConstraint('desc_id'),
    schema='guide'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('audios', schema='guide')
    op.drop_table('images', schema='guide')
    op.drop_table('descriptions', schema='guide')
    op.drop_table('landmarks', schema='guide')
    op.drop_table('cities', schema='guide')
    op.drop_table('countries', schema='guide')

    op.execute('drop type if exists countryen;')
    op.execute('drop type if exists countryru;')
    op.execute('drop type if exists cityen;')
    op.execute('drop type if exists cityru;')

    op.execute('drop schema if exists guide;')
    # ### end Alembic commands ###
